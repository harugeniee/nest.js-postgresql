import {
  MigrationInterface,
  QueryRunner,
  Table,
  Index,
  ForeignKey,
} from 'typeorm';

export class CreateReportsTables1700000000000 implements MigrationInterface {
  name = 'CreateReportsTables1700000000000';

  public async up(queryRunner: QueryRunner): Promise<void> {
    // Create reports table
    await queryRunner.createTable(
      new Table({
        name: 'reports',
        columns: [
          {
            name: 'id',
            type: 'bigint',
            isPrimary: true,
            generationStrategy: 'increment',
          },
          {
            name: 'uuid',
            type: 'uuid',
            isUnique: true,
            generationStrategy: 'uuid',
            default: 'uuid_generate_v4()',
          },
          {
            name: 'userId',
            type: 'bigint',
            isNullable: false,
          },
          {
            name: 'reportableType',
            type: 'varchar',
            length: '50',
            isNullable: false,
          },
          {
            name: 'reportableId',
            type: 'bigint',
            isNullable: false,
          },
          {
            name: 'reason',
            type: 'varchar',
            length: '50',
            isNullable: false,
          },
          {
            name: 'description',
            type: 'text',
            isNullable: true,
          },
          {
            name: 'status',
            type: 'varchar',
            length: '20',
            default: "'pending'",
            isNullable: false,
          },
          {
            name: 'priority',
            type: 'varchar',
            length: '10',
            default: "'medium'",
            isNullable: false,
          },
          {
            name: 'moderatorId',
            type: 'bigint',
            isNullable: true,
          },
          {
            name: 'action',
            type: 'varchar',
            length: '50',
            isNullable: true,
          },
          {
            name: 'moderatorNotes',
            type: 'text',
            isNullable: true,
          },
          {
            name: 'resolution',
            type: 'varchar',
            length: '20',
            isNullable: true,
          },
          {
            name: 'resolutionDetails',
            type: 'text',
            isNullable: true,
          },
          {
            name: 'assignedAt',
            type: 'timestamp',
            isNullable: true,
          },
          {
            name: 'resolvedAt',
            type: 'timestamp',
            isNullable: true,
          },
          {
            name: 'duplicateCount',
            type: 'int',
            default: 1,
            isNullable: false,
          },
          {
            name: 'isAutoGenerated',
            type: 'boolean',
            default: false,
            isNullable: false,
          },
          {
            name: 'metadata',
            type: 'jsonb',
            isNullable: true,
          },
          {
            name: 'createdAt',
            type: 'timestamp',
            default: 'CURRENT_TIMESTAMP(6)',
            precision: 6,
            isNullable: false,
          },
          {
            name: 'updatedAt',
            type: 'timestamp',
            default: 'CURRENT_TIMESTAMP(6)',
            precision: 6,
            onUpdate: 'CURRENT_TIMESTAMP(6)',
            isNullable: false,
          },
          {
            name: 'deletedAt',
            type: 'timestamp',
            precision: 6,
            isNullable: true,
          },
          {
            name: 'version',
            type: 'int',
            default: 1,
            isNullable: false,
          },
        ],
      }),
      true,
    );

    // Create report_actions table
    await queryRunner.createTable(
      new Table({
        name: 'report_actions',
        columns: [
          {
            name: 'id',
            type: 'bigint',
            isPrimary: true,
            generationStrategy: 'increment',
          },
          {
            name: 'uuid',
            type: 'uuid',
            isUnique: true,
            generationStrategy: 'uuid',
            default: 'uuid_generate_v4()',
          },
          {
            name: 'reportId',
            type: 'bigint',
            isNullable: false,
          },
          {
            name: 'moderatorId',
            type: 'bigint',
            isNullable: false,
          },
          {
            name: 'action',
            type: 'varchar',
            length: '50',
            isNullable: false,
          },
          {
            name: 'description',
            type: 'text',
            isNullable: true,
          },
          {
            name: 'notes',
            type: 'text',
            isNullable: true,
          },
          {
            name: 'metadata',
            type: 'jsonb',
            isNullable: true,
          },
          {
            name: 'createdAt',
            type: 'timestamp',
            default: 'CURRENT_TIMESTAMP(6)',
            precision: 6,
            isNullable: false,
          },
          {
            name: 'updatedAt',
            type: 'timestamp',
            default: 'CURRENT_TIMESTAMP(6)',
            precision: 6,
            onUpdate: 'CURRENT_TIMESTAMP(6)',
            isNullable: false,
          },
          {
            name: 'deletedAt',
            type: 'timestamp',
            precision: 6,
            isNullable: true,
          },
          {
            name: 'version',
            type: 'int',
            default: 1,
            isNullable: false,
          },
        ],
      }),
      true,
    );

    // Create indexes for reports table
    await queryRunner.createIndex(
      'reports',
      new Index('IDX_reports_reportable', ['reportableType', 'reportableId']),
    );

    await queryRunner.createIndex(
      'reports',
      new Index('IDX_reports_user', ['userId']),
    );

    await queryRunner.createIndex(
      'reports',
      new Index('IDX_reports_status', ['status']),
    );

    await queryRunner.createIndex(
      'reports',
      new Index('IDX_reports_priority', ['priority']),
    );

    await queryRunner.createIndex(
      'reports',
      new Index('IDX_reports_reason', ['reason']),
    );

    await queryRunner.createIndex(
      'reports',
      new Index('IDX_reports_created_at', ['createdAt']),
    );

    await queryRunner.createIndex(
      'reports',
      new Index('IDX_reports_assigned_at', ['assignedAt']),
    );

    await queryRunner.createIndex(
      'reports',
      new Index('IDX_reports_resolved_at', ['resolvedAt']),
    );

    // Create indexes for report_actions table
    await queryRunner.createIndex(
      'report_actions',
      new Index('IDX_report_actions_report', ['reportId']),
    );

    await queryRunner.createIndex(
      'report_actions',
      new Index('IDX_report_actions_moderator', ['moderatorId']),
    );

    await queryRunner.createIndex(
      'report_actions',
      new Index('IDX_report_actions_action', ['action']),
    );

    await queryRunner.createIndex(
      'report_actions',
      new Index('IDX_report_actions_created_at', ['createdAt']),
    );

    // Create foreign keys
    await queryRunner.createForeignKey(
      'reports',
      new ForeignKey({
        columnNames: ['userId'],
        referencedColumnNames: ['id'],
        referencedTableName: 'users',
        onDelete: 'CASCADE',
      }),
    );

    await queryRunner.createForeignKey(
      'reports',
      new ForeignKey({
        columnNames: ['moderatorId'],
        referencedColumnNames: ['id'],
        referencedTableName: 'users',
        onDelete: 'SET NULL',
      }),
    );

    await queryRunner.createForeignKey(
      'report_actions',
      new ForeignKey({
        columnNames: ['reportId'],
        referencedColumnNames: ['id'],
        referencedTableName: 'reports',
        onDelete: 'CASCADE',
      }),
    );

    await queryRunner.createForeignKey(
      'report_actions',
      new ForeignKey({
        columnNames: ['moderatorId'],
        referencedColumnNames: ['id'],
        referencedTableName: 'users',
        onDelete: 'CASCADE',
      }),
    );
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    // Drop foreign keys
    await queryRunner.dropForeignKey(
      'report_actions',
      'FK_report_actions_moderator',
    );
    await queryRunner.dropForeignKey(
      'report_actions',
      'FK_report_actions_report',
    );
    await queryRunner.dropForeignKey('reports', 'FK_reports_moderator');
    await queryRunner.dropForeignKey('reports', 'FK_reports_user');

    // Drop indexes
    await queryRunner.dropIndex(
      'report_actions',
      'IDX_report_actions_created_at',
    );
    await queryRunner.dropIndex('report_actions', 'IDX_report_actions_action');
    await queryRunner.dropIndex(
      'report_actions',
      'IDX_report_actions_moderator',
    );
    await queryRunner.dropIndex('report_actions', 'IDX_report_actions_report');
    await queryRunner.dropIndex('reports', 'IDX_reports_resolved_at');
    await queryRunner.dropIndex('reports', 'IDX_reports_assigned_at');
    await queryRunner.dropIndex('reports', 'IDX_reports_created_at');
    await queryRunner.dropIndex('reports', 'IDX_reports_reason');
    await queryRunner.dropIndex('reports', 'IDX_reports_priority');
    await queryRunner.dropIndex('reports', 'IDX_reports_status');
    await queryRunner.dropIndex('reports', 'IDX_reports_user');
    await queryRunner.dropIndex('reports', 'IDX_reports_reportable');

    // Drop tables
    await queryRunner.dropTable('report_actions');
    await queryRunner.dropTable('reports');
  }
}
