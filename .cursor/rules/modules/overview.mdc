---
alwaysApply: false
---

@rule project_overview
This is a comprehensive NestJS social media platform with the following architecture:

## Core Infrastructure
- **BaseService<T>**: Extends all domain services with CRUD, caching, pagination, lifecycle hooks
- **BaseEntityCustom**: All entities extend this with Snowflake IDs, UUIDs, timestamps, soft delete
- **TypeOrmBaseRepository<T>**: Repository pattern with transaction support
- **CacheService**: Redis-based caching with SWR, distributed locks, atomic operations
- **ConditionBuilder**: Safe query building with TypeORM operators
- **PaginationFormatter**: Consistent offset and cursor pagination responses

## Domain Modules
- **Articles**: Content management with scheduled publishing, co-authors, SEO
- **Comments**: Nested comments with media/sticker support, mentions, pinning
- **Reactions**: Polymorphic reactions with toggle semantics, count aggregation
- **Bookmarks**: User bookmarking with folders, tags, status management
- **Notifications**: Multi-channel notifications with preferences, RabbitMQ processing
- **Users**: Multi-auth support (email/password, Firebase, OAuth), session management
- **QR**: QR ticket system with WebSocket polling, PKCE security, action framework
- **Share**: Link generation, click tracking, attribution, daily aggregation
- **Stickers**: Sticker packs with media integration, animation support
- **Rate-limit**: Hybrid rate limiting (plan + policy based), Redis distributed
- **Follow**: User following with Roaring Bitmap optimization
- **Analytics**: User behavior tracking and metrics
- **Organizations**: Multi-tenant organization support
- **Permissions**: Granular permission system
- **Reports**: Content reporting system
- **Media**: File upload and management
- **Tags**: Content tagging system
- **Workers**: Background job processing

## Key Patterns
- **No migrations/generators**: Manual entity and service creation only
- **Yarn only**: No npm/pnpm usage
- **Thin controllers**: All business logic in services
- **Signed cursors**: HMAC-protected pagination tokens
- **RabbitMQ events**: Async processing instead of EventEmitter
- **i18n errors**: Structured error messages with translation keys
- **Transaction support**: Complex operations use runInTransaction
- **Cache invalidation**: Automatic on create/update/delete
- **Security whitelists**: Relations and select field restrictions@rule project_overview
This is a comprehensive NestJS social media platform with the following architecture:

## Core Infrastructure
- **BaseService<T>**: Extends all domain services with CRUD, caching, pagination, lifecycle hooks
- **BaseEntityCustom**: All entities extend this with Snowflake IDs, UUIDs, timestamps, soft delete
- **TypeOrmBaseRepository<T>**: Repository pattern with transaction support
- **CacheService**: Redis-based caching with SWR, distributed locks, atomic operations
- **ConditionBuilder**: Safe query building with TypeORM operators
- **PaginationFormatter**: Consistent offset and cursor pagination responses

## Domain Modules
- **Articles**: Content management with scheduled publishing, co-authors, SEO
- **Comments**: Nested comments with media/sticker support, mentions, pinning
- **Reactions**: Polymorphic reactions with toggle semantics, count aggregation
- **Bookmarks**: User bookmarking with folders, tags, status management
- **Notifications**: Multi-channel notifications with preferences, RabbitMQ processing
- **Users**: Multi-auth support (email/password, Firebase, OAuth), session management
- **QR**: QR ticket system with WebSocket polling, PKCE security, action framework
- **Share**: Link generation, click tracking, attribution, daily aggregation
- **Stickers**: Sticker packs with media integration, animation support
- **Rate-limit**: Hybrid rate limiting (plan + policy based), Redis distributed
- **Follow**: User following with Roaring Bitmap optimization
- **Analytics**: User behavior tracking and metrics
- **Organizations**: Multi-tenant organization support
- **Permissions**: Granular permission system
- **Reports**: Content reporting system
- **Media**: File upload and management
- **Tags**: Content tagging system
- **Workers**: Background job processing

## Key Patterns
- **No migrations/generators**: Manual entity and service creation only
- **Yarn only**: No npm/pnpm usage
- **Thin controllers**: All business logic in services
- **Signed cursors**: HMAC-protected pagination tokens
- **RabbitMQ events**: Async processing instead of EventEmitter
- **i18n errors**: Structured error messages with translation keys
- **Transaction support**: Complex operations use runInTransaction
- **Cache invalidation**: Automatic on create/update/delete
- **Security whitelists**: Relations and select field restrictions