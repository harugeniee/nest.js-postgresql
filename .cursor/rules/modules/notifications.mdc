---
alwaysApply: false
---

@rule notifications_contract
Entity `Notification` (current implementation):
- userId (bigint FK), type (enum), channel (enum), priority (enum)
- title (varchar), message (text), actionUrl (varchar), status (enum)
- isRead (bool), readAt (timestamp), scheduledFor (timestamp)
- maxRetries (int), retryCount (int), lastRetryAt (timestamp)
- emailTemplate (varchar), emailTemplateData (json), pushData (json)
- relatedEntityType (varchar), relatedEntityId (varchar), metadata (json)
- indexes: (userId, isRead), (userId, createdAt), (status, scheduledFor)

Related entity:
- NotificationPreference: user notification preferences

Service config:
- entityName: 'Notification'; cache: { prefix: 'notifications', ttlSec: 300, swrSec: 60 }
- defaultSearchField: 'title'
- getSearchableColumns(): ['title', 'message']
- relationsWhitelist: { user: true }
- emitEvents: false (use RabbitMQ instead)

Controller routes:
- GET /notifications -> getUserNotifications (offset pagination)
- POST /notifications -> @Auth() createNotification
- POST /notifications/bulk -> @Auth() createBulkNotifications
- PATCH /notifications/:id/read -> @Auth() markAsRead
- POST /notifications/mark-all-read -> @Auth() markAllAsRead
- GET /notifications/stats -> getUserNotificationStats
- GET /notifications/preferences -> getUserPreferences

@acceptance
- [ ] User preference checking before sending.
- [ ] RabbitMQ integration for async processing.
- [ ] Proper retry mechanism with exponential backoff.
- [ ] Channel-specific job routing.
- [ ] Bulk operations with batching.
- [ ] Statistics caching for performance.
- [ ] Broadcast notification support.@rule notifications_contract
Entity `Notification` (current implementation):
- userId (bigint FK), type (enum), channel (enum), priority (enum)
- title (varchar), message (text), actionUrl (varchar), status (enum)
- isRead (bool), readAt (timestamp), scheduledFor (timestamp)
- maxRetries (int), retryCount (int), lastRetryAt (timestamp)
- emailTemplate (varchar), emailTemplateData (json), pushData (json)
- relatedEntityType (varchar), relatedEntityId (varchar), metadata (json)
- indexes: (userId, isRead), (userId, createdAt), (status, scheduledFor)

Related entity:
- NotificationPreference: user notification preferences

Service config:
- entityName: 'Notification'; cache: { prefix: 'notifications', ttlSec: 300, swrSec: 60 }
- defaultSearchField: 'title'
- getSearchableColumns(): ['title', 'message']
- relationsWhitelist: { user: true }
- emitEvents: false (use RabbitMQ instead)

Controller routes:
- GET /notifications -> getUserNotifications (offset pagination)
- POST /notifications -> @Auth() createNotification
- POST /notifications/bulk -> @Auth() createBulkNotifications
- PATCH /notifications/:id/read -> @Auth() markAsRead
- POST /notifications/mark-all-read -> @Auth() markAllAsRead
- GET /notifications/stats -> getUserNotificationStats
- GET /notifications/preferences -> getUserPreferences

@acceptance
- [ ] User preference checking before sending.
- [ ] RabbitMQ integration for async processing.
- [ ] Proper retry mechanism with exponential backoff.
- [ ] Channel-specific job routing.
- [ ] Bulk operations with batching.
- [ ] Statistics caching for performance.
- [ ] Broadcast notification support.