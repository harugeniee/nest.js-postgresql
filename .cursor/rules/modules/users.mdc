---
alwaysApply: false
---

@rule users_contract
Entity `User` (current implementation):
- name (varchar), username (varchar, unique), email (varchar, unique)
- password (varchar, nullable), firebaseUid (varchar, nullable)
- photoUrl (varchar), isEmailVerified (bool), authMethod (enum)
- status (enum), role (enum), oauthId (varchar), oauthProvider (varchar)
- indexes: (email), (username), (firebaseUid), (oauthId, oauthProvider)

Related entities:
- UserSession: user login sessions
- UserDeviceToken: device tokens for push notifications

Service config:
- entityName: 'User'; cache: { prefix: 'users', ttlSec: 60, swrSec: 30 }
- defaultSearchField: 'name'
- getSearchableColumns(): ['name', 'email', 'username']
- relationsWhitelist: { avatar: true }

Controller routes:
- GET /users -> findAll (offset pagination)
- GET /users/cursor -> findAllCursor (cursor pagination)
- GET /users/:id -> findById(SnowflakeIdPipe)
- POST /users/register -> register
- PATCH /users/:id -> @Auth() updateUser
- POST /users/sessions -> @Auth() createSession
- DELETE /users/sessions/:id -> @Auth() revokeSession
- POST /users/device-tokens -> @Auth() createDeviceToken

@acceptance
- [ ] Multiple auth methods supported (email/password, Firebase, OAuth).
- [ ] Session management with proper cleanup.
- [ ] Device token management for push notifications.
- [ ] Proper password hashing with bcrypt.
- [ ] Email verification workflow.
- [ ] Role-based access control.
- [ ] Soft delete support via status field.@rule users_contract
Entity `User` (current implementation):
- name (varchar), username (varchar, unique), email (varchar, unique)
- password (varchar, nullable), firebaseUid (varchar, nullable)
- photoUrl (varchar), isEmailVerified (bool), authMethod (enum)
- status (enum), role (enum), oauthId (varchar), oauthProvider (varchar)
- indexes: (email), (username), (firebaseUid), (oauthId, oauthProvider)

Related entities:
- UserSession: user login sessions
- UserDeviceToken: device tokens for push notifications

Service config:
- entityName: 'User'; cache: { prefix: 'users', ttlSec: 60, swrSec: 30 }
- defaultSearchField: 'name'
- getSearchableColumns(): ['name', 'email', 'username']
- relationsWhitelist: { avatar: true }

Controller routes:
- GET /users -> findAll (offset pagination)
- GET /users/cursor -> findAllCursor (cursor pagination)
- GET /users/:id -> findById(SnowflakeIdPipe)
- POST /users/register -> register
- PATCH /users/:id -> @Auth() updateUser
- POST /users/sessions -> @Auth() createSession
- DELETE /users/sessions/:id -> @Auth() revokeSession
- POST /users/device-tokens -> @Auth() createDeviceToken

@acceptance
- [ ] Multiple auth methods supported (email/password, Firebase, OAuth).
- [ ] Session management with proper cleanup.
- [ ] Device token management for push notifications.
- [ ] Proper password hashing with bcrypt.
- [ ] Email verification workflow.
- [ ] Role-based access control.
- [ ] Soft delete support via status field.