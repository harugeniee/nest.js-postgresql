---
alwaysApply: false
---

@rule rate_limit_contract
Entities (current implementation):
- Plan: rate limit plans with tier-based limits
- ApiKey: API keys with plan associations
- IpWhitelist: IP addresses exempt from rate limits
- RateLimitPolicy: dynamic rate limit policies
- RateLimitLog: rate limit violation logs

Service config:
- Global module with single RateLimitService
- Redis-based distributed rate limiting
- Hybrid system: plan-based + policy-based
- Cache invalidation across multiple instances

Controller routes:
- GET /rate-limit/admin/plans -> listPlans
- POST /rate-limit/admin/plans -> createPlan
- GET /rate-limit/admin/keys -> listApiKeys
- POST /rate-limit/admin/keys -> createApiKey
- GET /rate-limit/admin/whitelist -> listWhitelist
- POST /rate-limit/admin/whitelist -> addToWhitelist

Guard usage:
- @UseGuards(RateLimitGuard) on protected routes
- Automatic rate limit checking with Redis
- IP whitelist bypass support
- Plan-based limit enforcement

@acceptance
- [ ] Distributed rate limiting with Redis.
- [ ] IP whitelist support for bypassing limits.
- [ ] Plan-based tier system.
- [ ] Policy-based dynamic limits.
- [ ] Admin endpoints for management.
- [ ] Proper logging of violations.
- [ ] Cache invalidation across instances.@rule rate_limit_contract
Entities (current implementation):
- Plan: rate limit plans with tier-based limits
- ApiKey: API keys with plan associations
- IpWhitelist: IP addresses exempt from rate limits
- RateLimitPolicy: dynamic rate limit policies
- RateLimitLog: rate limit violation logs

Service config:
- Global module with single RateLimitService
- Redis-based distributed rate limiting
- Hybrid system: plan-based + policy-based
- Cache invalidation across multiple instances

Controller routes:
- GET /rate-limit/admin/plans -> listPlans
- POST /rate-limit/admin/plans -> createPlan
- GET /rate-limit/admin/keys -> listApiKeys
- POST /rate-limit/admin/keys -> createApiKey
- GET /rate-limit/admin/whitelist -> listWhitelist
- POST /rate-limit/admin/whitelist -> addToWhitelist

Guard usage:
- @UseGuards(RateLimitGuard) on protected routes
- Automatic rate limit checking with Redis
- IP whitelist bypass support
- Plan-based limit enforcement

@acceptance
- [ ] Distributed rate limiting with Redis.
- [ ] IP whitelist support for bypassing limits.
- [ ] Plan-based tier system.
- [ ] Policy-based dynamic limits.
- [ ] Admin endpoints for management.
- [ ] Proper logging of violations.
- [ ] Cache invalidation across instances.