---
alwaysApply: false
---

@rule reactions_contract
Entity `Reaction` (current implementation):
- userId (bigint FK), subjectType (varchar), subjectId (varchar), kind (varchar)
- indexes: (userId, subjectType, subjectId, kind) unique constraint

Related entity:
- ReactionCount: aggregated counts per subject and kind

Service config:
- entityName: 'Reaction'; cache: { prefix: 'reactions', ttlSec: 60, swrSec: 30 }
- defaultSearchField: 'kind'
- getSearchableColumns(): ['kind', 'subjectType']
- relationsWhitelist: { user: true }
- emitEvents: false (use RabbitMQ instead)

Controller routes:
- POST /reactions/toggle -> @Auth() toggle
- POST /reactions/set -> @Auth() set
- POST /reactions/unset -> @Auth() unset
- GET /reactions -> list (offset pagination)
- GET /reactions/counts -> getCounts
- POST /reactions/counts/batch -> getCountsBatch

@acceptance
- [ ] Toggle idempotent (set/unset semantics).
- [ ] Count cache invalidated correctly on toggle.
- [ ] Atomic count updates with transaction support.
- [ ] Batch count retrieval for performance.
- [ ] RabbitMQ events for async processing.
- [ ] Proper soft delete handling.@rule reactions_contract
Entity `Reaction` (current implementation):
- userId (bigint FK), subjectType (varchar), subjectId (varchar), kind (varchar)
- indexes: (userId, subjectType, subjectId, kind) unique constraint

Related entity:
- ReactionCount: aggregated counts per subject and kind

Service config:
- entityName: 'Reaction'; cache: { prefix: 'reactions', ttlSec: 60, swrSec: 30 }
- defaultSearchField: 'kind'
- getSearchableColumns(): ['kind', 'subjectType']
- relationsWhitelist: { user: true }
- emitEvents: false (use RabbitMQ instead)

Controller routes:
- POST /reactions/toggle -> @Auth() toggle
- POST /reactions/set -> @Auth() set
- POST /reactions/unset -> @Auth() unset
- GET /reactions -> list (offset pagination)
- GET /reactions/counts -> getCounts
- POST /reactions/counts/batch -> getCountsBatch

@acceptance
- [ ] Toggle idempotent (set/unset semantics).
- [ ] Count cache invalidated correctly on toggle.
- [ ] Atomic count updates with transaction support.
- [ ] Batch count retrieval for performance.
- [ ] RabbitMQ events for async processing.
- [ ] Proper soft delete handling.