---
alwaysApply: false
---

@rule bookmarks_contract
Entity `Bookmark` (current implementation):
- userId (bigint FK), bookmarkableType (enum), bookmarkableId (varchar)
- folderId (bigint FK, nullable), title (varchar), description (text)
- tags (varchar), isFavorite (bool), isReadLater (bool), status (enum)
- indexes: (userId, bookmarkableType, bookmarkableId) unique, (userId, status)

Related entity:
- BookmarkFolder: user-created folders for organization

Service config:
- entityName: 'Bookmark'; relationsWhitelist: { user: true, folder: true }
- softDelete: true (uses status field instead of deletedAt)
- No cache configured (relatively low-volume operations)

Controller routes:
- GET /bookmarks -> getUserBookmarks (offset pagination)
- POST /bookmarks -> @Auth() createBookmark
- PATCH /bookmarks/:id -> @Auth() updateBookmark
- DELETE /bookmarks/:id -> @Auth() removeBookmark
- GET /bookmarks/folders -> getUserFolders
- POST /bookmarks/folders -> @Auth() createFolder
- GET /bookmarks/stats -> getBookmarkStats

@acceptance
- [ ] Unique constraint prevents duplicate bookmarks.
- [ ] Folder validation and organization.
- [ ] Status-based soft delete (not deletedAt).
- [ ] Tag parsing and statistics.
- [ ] Type-based filtering and stats.
- [ ] Proper user ownership validation.@rule bookmarks_contract
Entity `Bookmark` (current implementation):
- userId (bigint FK), bookmarkableType (enum), bookmarkableId (varchar)
- folderId (bigint FK, nullable), title (varchar), description (text)
- tags (varchar), isFavorite (bool), isReadLater (bool), status (enum)
- indexes: (userId, bookmarkableType, bookmarkableId) unique, (userId, status)

Related entity:
- BookmarkFolder: user-created folders for organization

Service config:
- entityName: 'Bookmark'; relationsWhitelist: { user: true, folder: true }
- softDelete: true (uses status field instead of deletedAt)
- No cache configured (relatively low-volume operations)

Controller routes:
- GET /bookmarks -> getUserBookmarks (offset pagination)
- POST /bookmarks -> @Auth() createBookmark
- PATCH /bookmarks/:id -> @Auth() updateBookmark
- DELETE /bookmarks/:id -> @Auth() removeBookmark
- GET /bookmarks/folders -> getUserFolders
- POST /bookmarks/folders -> @Auth() createFolder
- GET /bookmarks/stats -> getBookmarkStats

@acceptance
- [ ] Unique constraint prevents duplicate bookmarks.
- [ ] Folder validation and organization.
- [ ] Status-based soft delete (not deletedAt).
- [ ] Tag parsing and statistics.
- [ ] Type-based filtering and stats.
- [ ] Proper user ownership validation.